import groovy.xml.Namespace

apply plugin: 'com.android.application'

def manifestVersionName() {
    def manifestFile = file(project.projectDir.absolutePath + '/src/main/AndroidManifest.xml')
    def ns = new Namespace("http://schemas.android.com/apk/res/android", "android")
    def xml = new XmlParser().parse(manifestFile)
    return xml.attributes()[ns.versionName].toString()
}

android {
    compileSdkVersion 28
    buildToolsVersion "28.0.3"
    useLibrary 'org.apache.http.legacy'

    defaultConfig {
        applicationId "com.yassirh.digitalocean"
        minSdkVersion 23
        targetSdkVersion 28
        vectorDrawables.useSupportLibrary = true
    }
    if (System.getenv("TRAVIS")) {
        signingConfigs {
            release {
                keyAlias System.getenv("KEY_STORE_ALIAS")
                keyPassword System.getenv("KEY_PASSWORD")
                storeFile file("release.keystore")
                storePassword System.getenv("KEY_STORE_PASSWORD")
            }
        }
        buildTypes {
            release {
                minifyEnabled false
                zipAlignEnabled true
                signingConfig signingConfigs.release
            }
        }
    } else {
        Properties props = new Properties()
        props.load(new FileInputStream(file(project.property("DigitalOceanSwimmer.properties"))))

        signingConfigs {
            release {
                storeFile file(props['keystore'])
                storePassword props['keystore.password']
                keyAlias props['keyAlias']
                keyPassword props['keyPassword']
            }
        }

        buildTypes {
            release {
                minifyEnabled false
                //proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
                signingConfig signingConfigs.release
                zipAlignEnabled true
                applicationVariants.all { variant ->
                    variant.outputs.each { output ->
                        def outputFile = output.outputFile
                        def versionName = manifestVersionName()
                        if (outputFile != null && outputFile.name.endsWith('.apk')) {
                            output.outputFileName = new File(props['apkOutputDir'], outputFile.name.replace('.apk', "-" + versionName + ".apk"))
                        }
                    }
                }
            }
        }
    }

    lintOptions {
        htmlReport true
        htmlOutput file("lint-report.html")
        abortOnError false
        warningsAsErrors true
    }

}

dependencies {
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support:design:28.0.0'
    implementation 'android.arch.lifecycle:extensions:1.1.1'
    implementation 'com.loopj.android:android-async-http:1.4.9'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation "org.apache.httpcomponents:httpcore:4.3.2"
}
